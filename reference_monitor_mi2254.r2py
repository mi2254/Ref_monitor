"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"
mycontext['lock'] = createlock()  
class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...    
    mycontext['lock'].acquire(True) 
    if create:

      if self.Bfn in listfiles():
        removefile(self.Bfn)
      self.Bfile = openfile(self.Bfn,create)                    
      #self.Afile.writeat('SE',0)
      if self.Afn in listfiles():        
        self.Afile = openfile(self.Afn,create)
        self.Bfile.writeat(self.Afile.readat(None,0),0)        
      else:        
        self.Afile = openfile(self.Afn,create)
        self.Afile.writeat('SE',0)  
    else:
        if self.Afn in listfiles():
          self.Afile = openfile(self.Afn,True)
          self.Bfile = openfile(self.Bfn,True)
          self.Bfile.writeat(self.Afile.readat(None,0),0)
      
    

  def writeat(self,data,offset):          
    if offset < 0 or offset > len(self.Bfile.readat(None,0)) :      
      return      
   
    else:     
      self.Bfile.writeat(data,offset)      
  
  def readat(self,bytes,offset):    

    aFilelength = len(self.Afile.readat(None,0))
    if offset < 0 or aFilelength < 0 or offset >= aFilelength :            
      return ''
     
    
    else:
      #Try Reading the File else raise Exception
      try:
         read_data = self.Afile.readat(bytes,offset)         
         return read_data
      except:          
          return ''

  def close(self):
    backup_data = self.Afile.readat(None,0)
    currentData = self.Bfile.readat(None,0)
    backupfileName = self.Afn
 
    if currentData.startswith("S") and currentData.endswith("E"):    
      self.Afile.close()
      self.Bfile.close()
      removefile(self.Afn)
      openfile(backupfileName,True).writeat(currentData,0)
      removefile(self.Bfn)
    else:   
      self.Afile.close()
      self.Bfile.close()
      removefile(self.Afn)
      openfile(backupfileName,True).writeat(backup_data,0)
      removefile(self.Bfn)
    mycontext['lock'].release()

def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
